{"version":3,"sources":["nasa.js","App.js","serviceWorker.js","index.js"],"names":["Nasa","data","className","title","src","links","href","alt","description","App","useState","desc","setDesc","search","setSearch","query","setQuery","request","useEffect","getDesc","a","console","log","fetch","response","json","collection","items","slice","onSubmit","e","preventDefault","toUpperCase","replace","type","placeholder","onChange","target","value","length","map","d","key","indexOf","style","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAceA,MAXf,YAAyB,IAATC,EAAQ,EAARA,KACd,OACE,yBAAKC,UAAU,cACb,4BAAKD,EAAKA,KAAK,GAAGE,OAClB,yBAAKC,IAAKH,EAAKI,MAAM,GAAGC,KAAMC,IAAI,KAClC,2CACA,2BAAIN,EAAKA,KAAK,GAAGO,eCmDRC,MAxDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAERG,EAFQ,KAEAC,EAFA,OAGaJ,mBAAS,iBAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKPC,EAAO,+CAA2CF,EAA3C,qBAEbG,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAAMI,EAAO,uCAAG,8BAAAC,EAAA,6DACdC,QAAQC,IAAIL,GADE,SAESM,MAAMN,GAFf,cAERO,EAFQ,gBAGKA,EAASC,OAHd,OAGRxB,EAHQ,OAIdW,EAAQX,EAAKyB,WAAWC,MAAMC,MAAM,EAAG,KACvCP,QAAQC,IAAIX,GALE,2CAAH,qDAoBb,OACE,yBAAKT,UAAU,OACb,0BAAMA,UAAU,aAAa2B,SAVhB,SAACC,GAChBA,EAAEC,iBAEFlB,GADAA,EAASA,EAAOmB,eACAC,QAAQ,IAAK,OAC7BjB,EAASH,GACTA,EAAS,KAML,2BACEX,UAAU,eACVgC,KAAK,OACLC,YAAY,YACZC,SAnBa,SAACN,GACpBhB,EAAUgB,EAAEO,OAAOC,QAmBbA,MAAOzB,IAET,4BAAQX,UAAU,aAAagC,KAAK,UAApC,UAIF,yBAAKhC,UAAU,aACZS,EAAK4B,OAAS,EACb5B,EAAK6B,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAMC,IAAK/B,EAAKgC,QAAQF,GAAIxC,KAAMwC,OAElD,wBAAIG,MAAO,CAAEC,MAAO,UAApB,sBCzCUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.1855f7d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nasa.css\";\r\n\r\nfunction Nasa({ data }) {\r\n  return (\r\n    <div className=\"nasa-items\">\r\n      <h2>{data.data[0].title}</h2>\r\n      <img src={data.links[0].href} alt=\"\" />\r\n      <h4>Description</h4>\r\n      <p>{data.data[0].description}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nasa;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Nasa from \"./nasa.js\";\n\nfunction App() {\n  const [desc, setDesc] = useState([]);\n  let [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"dark%20energy\");\n\n  const request = `https://images-api.nasa.gov/search?q=${query}&media_type=image`;\n\n  useEffect(() => {\n    getDesc();\n  }, [query]);\n\n  const getDesc = async () => {\n    console.log(request);\n    const response = await fetch(request);\n    const data = await response.json();\n    setDesc(data.collection.items.slice(0, 15));\n    console.log(desc);\n  };\n  //setQuery(search);\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getQuery = (e) => {\n    e.preventDefault();\n    search = search.toUpperCase();\n    search = search.replace(\" \", \"%20\");\n    setQuery(search);\n    search = \"\";\n  };\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-box\" onSubmit={getQuery}>\n        <input\n          className=\"search-field\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          onChange={updateSearch}\n          value={search}\n        />\n        <button className=\"search-btn\" type=\"submit\">\n          Enter\n        </button>\n      </form>\n      <div className=\"show-desc\">\n        {desc.length > 1 ? (\n          desc.map((d) => <Nasa key={desc.indexOf(d)} data={d} />)\n        ) : (\n          <h3 style={{ color: \"white\" }}>Try Other input</h3>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}